{"version":3,"sources":["components/GoldSilverCalculator.js","reportWebVitals.js","index.js"],"names":["GoldSilverCalculator","useState","goldrate","setGoldrate","silverRate","setSilverRate","invalidGoldMessage","setInvalidGoldMessage","invalidSilverMessage","setInvalidSilverMessage","wastage","setWastage","goldweight","setGoldweight","silverWeight","setSilverWeight","goldamount","setGoldamount","silveramount","setSilverAmount","wastageamount","setWastageAmount","gstgold","setGSTGold","gstsilver","setGSTSilver","totalGoldAmount","setTotalGoldamount","totalSilverAmount","setTotalSilveramount","wastageingram","setWastageingram","className","type","id","value","onChange","e","target","onClick","goldAmount","wastageAmount","GSTAmount","wastageinGram","Math","round","silverAmount","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAGe,SAASA,IAEhB,MAAgCC,qBAAhC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCF,qBAApC,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAAoDJ,oBAAS,GAA7D,mBAAOK,EAAP,KAA2BC,EAA3B,KACA,EAAwDN,oBAAS,GAAjE,mBAAOO,EAAP,KAA6BC,EAA7B,KACA,EAA8BR,qBAA9B,mBAAOS,EAAP,KAAgBC,EAAhB,KACA,EAAoCV,qBAApC,mBAAOW,EAAP,KAAmBC,EAAnB,KACA,EAAwCZ,qBAAxC,mBAAOa,EAAP,KAAqBC,EAArB,KACA,EAAoCd,mBAAS,GAA7C,mBAAOe,EAAP,KAAmBC,EAAnB,KACA,EAAwChB,mBAAS,GAAjD,mBAAOiB,EAAP,KAAqBC,EAArB,KACA,EAA0ClB,mBAAS,GAAnD,mBAAOmB,EAAP,KAAsBC,EAAtB,KACA,EAA8BpB,mBAAS,GAAvC,mBAAOqB,EAAP,KAAgBC,EAAhB,KACA,EAAkCtB,mBAAS,GAA3C,mBAAOuB,EAAP,KAAkBC,EAAlB,KACA,EAA8CxB,mBAAS,GAAvD,mBAAOyB,EAAP,KAAwBC,GAAxB,KACA,GAAkD1B,mBAAS,GAA3D,qBAAO2B,GAAP,MAA0BC,GAA1B,MACA,GAA0C5B,mBAAS,GAAnD,qBAAO6B,GAAP,MAAsBC,GAAtB,MAkCI,OACI,sBAAKC,UAAU,YAAf,UACI,sBAAKA,UAAU,MAAf,UACI,sBAAKA,UAAU,gBAAf,UACI,wBAAQA,UAAU,eAAeC,KAAK,SAAS,iBAAe,WAAW,iBAAe,yBAAyB,gBAAc,QAAQ,gBAAc,wBAArJ,6BACA,wBAAQD,UAAU,eAAeC,KAAK,SAAS,iBAAe,WAAW,iBAAe,yBAAyB,gBAAc,QAAQ,gBAAc,wBAArJ,kCAEJ,qBAAKD,UAAU,+BAAf,SACA,sBAAKA,UAAU,0BAA0BE,GAAG,wBAA5C,UACI,oBAAIF,UAAU,aAAd,6BACA,iCACI,gCACI,wDACA,uBAAOC,KAAK,SAASD,UAAU,eAAeG,MAAOjC,EAAUkC,SAAU,SAAAC,GAAC,OAAIlC,GAAakC,EAAEC,OAAOH,aAExG,gCACI,yDACA,uBAAOF,KAAK,SAASD,UAAU,eAAeG,MAAOvB,EAAYwB,SAAU,SAAAC,GAAC,OAAIxB,GAAewB,EAAEC,OAAOH,aAE5G,gCACI,iDACA,uBAAOF,KAAK,SAASD,UAAU,eAAeG,MAAOzB,EAAS0B,SAAU,SAAAC,GAAC,OAAI1B,GAAY0B,EAAEC,OAAOH,aAErG7B,GAAsB,mBAAG0B,UAAU,iBAAb,4CAE3B,wBAAQA,UAAU,SAASO,QAzD/C,WACI,GAAGrC,GAAYU,EAAW,CACtB,IAAM4B,EAAatC,EAAWU,EACxB6B,EAAiB/B,EAAQ,IAAK8B,EAC9BE,EAAY,KAAMF,EAAaC,GAC/Bf,EAAkBc,EAAaC,EAAgBC,EAC/CC,EAAiBjC,EAAQ,IAAKE,EAEpCK,EAAcuB,GACdjB,EAAWmB,GACXf,GAAmBD,GACnBL,EAAiBoB,GACjBV,GAAiBY,QAEjBpC,GAAsB,IA2CV,uBAEA,wBAAOyB,UAAU,QAAjB,UACI,+BACI,6CACA,yCAEJ,+BACI,kDACA,wCAAahB,QAEjB,+BACI,qDAAwBN,EAAxB,QACA,wCAAakC,KAAKC,MAAMzB,SAE5B,+BACI,0CACA,wCAAawB,KAAKC,MAAMvB,SAE5B,+BACI,uCACA,wCAAasB,KAAKC,MAAMnB,YAGhC,8BACI,oDAAuBI,aAI/B,qBAAKE,UAAU,+BAAf,SACA,sBAAKA,UAAU,0BAA0BE,GAAG,wBAA5C,UAEI,oBAAIF,UAAU,aAAd,+BACA,iCACI,gCACI,0DACA,uBAAOC,KAAK,SAASD,UAAU,eAAeG,MAAO/B,EAAYgC,SAAU,SAAAC,GAAC,OAAIhC,GAAegC,EAAEC,OAAOH,aAE5G,gCACI,2DACA,uBAAOF,KAAK,SAASD,UAAU,eAAeG,MAAOrB,EAAcsB,SAAU,SAAAC,GAAC,OAAItB,GAAiBsB,EAAEC,OAAOH,aAE/G3B,GAAwB,mBAAGwB,UAAU,iBAAb,4CAE7B,wBAAQA,UAAU,SAASO,QAnF/C,WACI,GAAGnC,GAAcU,EAAa,CAC1B,IAAMgC,EAAe1C,EAAaU,EAC5B4B,EAAY,IAAKI,EACjBlB,EAAoBkB,EAAeJ,EAEzCvB,EAAgB2B,GAChBrB,EAAaiB,GACbb,GAAqBD,QAErBnB,GAAwB,IAyEZ,uBAEA,wBAAOuB,UAAU,QAAjB,UACI,+BACI,6CACA,yCAEJ,+BACI,oDACA,wCAAad,QAEjB,+BACI,0CACA,wCAAa0B,KAAKC,MAAMrB,SAE5B,+BACI,uCACA,wCAAaoB,KAAKC,MAAMjB,qBAMxC,qBAAKI,UAAU,cAAf,SACI,oBAAGA,UAAU,aAAb,yEAAsF,mBAAGe,KAAK,+BAA+BT,OAAO,SAA9C,uBAAtF,QAA+J,mBAAGS,KAAK,gCAAgCT,OAAO,SAA/C,iCClJvL,IAYeU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC3D,EAAD,MAEF4D,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.6a1b3dba.chunk.js","sourcesContent":["import React, { useState }   from 'react';\nimport './style.css';\n\nexport default function GoldSilverCalculator() {\n\n        const [goldrate, setGoldrate] = useState();\n        const [silverRate, setSilverRate] = useState();\n        const [invalidGoldMessage, setInvalidGoldMessage] = useState(false);\n        const [invalidSilverMessage, setInvalidSilverMessage] = useState(false);\n        const [wastage, setWastage] = useState();\n        const [goldweight, setGoldweight] = useState();\n        const [silverWeight, setSilverWeight] = useState();\n        const [goldamount, setGoldamount] = useState(0);\n        const [silveramount, setSilverAmount] = useState(0);\n        const [wastageamount, setWastageAmount] = useState(0);\n        const [gstgold, setGSTGold] = useState(0);\n        const [gstsilver, setGSTSilver] = useState(0);\n        const [totalGoldAmount, setTotalGoldamount] = useState(0);\n        const [totalSilverAmount, setTotalSilveramount] = useState(0);\n        const [wastageingram, setWastageingram] = useState(0);\n\n        function getGoldAmount(){\n            if(goldrate && goldweight){\n                const goldAmount = goldrate * goldweight;\n                const wastageAmount = (wastage/100)*goldAmount;\n                const GSTAmount = 0.03*(goldAmount + wastageAmount);\n                const totalGoldAmount = goldAmount + wastageAmount + GSTAmount;\n                const wastageinGram = (wastage/100)*goldweight;\n\n                setGoldamount(goldAmount);\n                setGSTGold(GSTAmount);\n                setTotalGoldamount(totalGoldAmount);\n                setWastageAmount(wastageAmount);\n                setWastageingram(wastageinGram);\n            }else{\n                setInvalidGoldMessage(true);\n            }\n        }\n\n        function getSilverAmount(){\n            if(silverRate && silverWeight){\n                const silverAmount = silverRate * silverWeight;\n                const GSTAmount = 0.03*silverAmount;\n                const totalSilverAmount = silverAmount + GSTAmount;\n\n                setSilverAmount(silverAmount);\n                setGSTSilver(GSTAmount);\n                setTotalSilveramount(totalSilverAmount);\n            }else{\n                setInvalidSilverMessage(true);\n            }\n        }\n\n            return (\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"topBtn col-12\">\n                            <button className=\"btn btn-dark\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#multiCollapseExample1\" aria-expanded=\"false\" aria-controls=\"multiCollapseExample1\">Gold Calculator</button>\n                            <button className=\"btn btn-dark\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#multiCollapseExample2\" aria-expanded=\"false\" aria-controls=\"multiCollapseExample2\">Silver Calculator</button>\n                        </div>\n                        <div className=\"col-lg-6 col-sm-12 col-xs-12\">\n                        <div className=\"collapse multi-collapse\" id=\"multiCollapseExample1\">\n                            <h1 className=\"headerName\">Gold Calculator</h1>\n                            <form>\n                                <div>\n                                    <label>Gold rate in &#x20b9;</label>\n                                    <input type=\"number\" className=\"form-control\" value={goldrate} onChange={e => setGoldrate(+e.target.value)}/>\n                                </div>\n                                <div>\n                                    <label>Gold Weight in grams</label>\n                                    <input type=\"number\" className=\"form-control\" value={goldweight} onChange={e => setGoldweight(+e.target.value)}/>\n                                </div>\n                                <div>\n                                    <label>Wastage in %</label>\n                                    <input type=\"number\" className=\"form-control\" value={wastage} onChange={e => setWastage(+e.target.value)}/>\n                                </div>\n                                {invalidGoldMessage && <p className=\"invalidMessage\"> ** Invalid input values **</p>}\n                            </form>\n                            <button className=\"button\" onClick={getGoldAmount}>Calculate</button>\n\n                            <table className=\"table\">\n                                <tr>\n                                    <th>Description</th>\n                                    <th>Rate</th>\n                                </tr>\n                                <tr>\n                                    <td>Actual Gold Rate</td>\n                                    <td>&#x20b9;{goldamount}</td>\n                                </tr>\n                                <tr>\n                                    <td>Wastage in amount ({wastage}%)</td>\n                                    <td>&#x20b9;{Math.round(wastageamount)}</td>\n                                </tr>\n                                <tr>\n                                    <td>GST (3%)</td>\n                                    <td>&#x20b9;{Math.round(gstgold)}</td>\n                                </tr>\n                                <tr>\n                                    <td>Total</td>\n                                    <td>&#x20b9;{Math.round(totalGoldAmount)}</td>\n                                </tr>\n                            </table>\n                            <div>\n                                <p>*Wastage in grams: {wastageingram}</p>\n                            </div>\n                        </div>\n                        </div>\n                        <div className=\"col-lg-6 col-sm-12 col-xs-12\">\n                        <div className=\"collapse multi-collapse\" id=\"multiCollapseExample2\">\n\n                            <h1 className=\"headerName\">Silver Calculator</h1>\n                            <form>\n                                <div>\n                                    <label>Silver rate in &#x20b9;</label>\n                                    <input type=\"number\" className=\"form-control\" value={silverRate} onChange={e => setSilverRate(+e.target.value)}/>\n                                </div>\n                                <div>\n                                    <label>Silver Weight in grams</label>\n                                    <input type=\"number\" className=\"form-control\" value={silverWeight} onChange={e => setSilverWeight(+e.target.value)}/>\n                                </div>\n                                {invalidSilverMessage && <p className=\"invalidMessage\"> ** Invalid input values **</p>}\n                            </form>\n                            <button className=\"button\" onClick={getSilverAmount}>Calculate</button>\n\n                            <table className=\"table\">\n                                <tr>\n                                    <th>Description</th>\n                                    <th>Rate</th>\n                                </tr>\n                                <tr>\n                                    <td>Actual Silver Rate</td>\n                                    <td>&#x20b9;{silveramount}</td>\n                                </tr>\n                                <tr>\n                                    <td>GST (3%)</td>\n                                    <td>&#x20b9;{Math.round(gstsilver)}</td>\n                                </tr>\n                                <tr>\n                                    <td>Total</td>\n                                    <td>&#x20b9;{Math.round(totalSilverAmount)}</td>\n                                </tr>\n                            </table>\n                        </div>\n                    </div>\n                    </div>\n                    <div className=\"footerBlock\">\n                        <p className=\"footerNote\">Developed based on indian gold & silver market standards by <a href=\"https://github.com/jayasurya\" target=\"_blank\">Jayasurya</a> and <a href=\"https://github.com/yokesharun\" target=\"_blank\">Arun Yokesh</a></p>\n                    </div>\n                </div>\n\n            );\n\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GoldSilverCalculator from './components/GoldSilverCalculator'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GoldSilverCalculator />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n"],"sourceRoot":""}