{"version":3,"sources":["components/GoldCalculator.js","reportWebVitals.js","index.js"],"names":["GoldCalc","useState","goldrate","setGoldrate","invalid","setInvalid","wastage","setWastage","goldweight","setGoldweight","goldamount","setGoldamount","wastageamount","setWastageAmount","gstamount","setGstamount","totalamount","setTotalamount","wastageingram","setWastageingram","className","type","id","name","value","onChange","e","target","onClick","goldAmount","wastageAmount","GSTAmount","totalAmount","wastageinGram","Math","round","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAGe,SAASA,IAEhB,MAAgCC,qBAAhC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,qBAA9B,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAAoCN,qBAApC,mBAAOO,EAAP,KAAmBC,EAAnB,KACA,EAAoCR,mBAAS,GAA7C,mBAAOS,EAAP,KAAmBC,EAAnB,KACA,EAA0CV,mBAAS,GAAnD,mBAAOW,EAAP,KAAsBC,EAAtB,KACA,EAAkCZ,mBAAS,GAA3C,mBAAOa,EAAP,KAAkBC,EAAlB,KACA,EAAsCd,mBAAS,GAA/C,mBAAOe,EAAP,KAAoBC,EAApB,KACA,EAA0ChB,mBAAS,GAAnD,mBAAOiB,EAAP,KAAsBC,EAAtB,KAoBI,OACI,sBAAKC,UAAU,MAAf,UACI,oBAAIA,UAAU,aAAd,6BACA,iCACI,gCACI,wDACA,uBAAOC,KAAK,SAASC,GAAG,QAAQC,KAAK,QAAQC,MAAOtB,EAAUuB,SAAU,SAAAC,GAAC,OAAIvB,GAAauB,EAAEC,OAAOH,aAEvG,gCACI,yDACA,uBAAOH,KAAK,SAASC,GAAG,UAAUC,KAAK,UAAUC,MAAOhB,EAAYiB,SAAU,SAAAC,GAAC,OAAIjB,GAAeiB,EAAEC,OAAOH,aAE/G,gCACI,iDACA,uBAAOH,KAAK,SAASC,GAAG,UAAUC,KAAK,UAAUC,MAAOlB,EAASmB,SAAU,SAAAC,GAAC,OAAInB,GAAYmB,EAAEC,OAAOH,aAExGpB,GAAW,mBAAGgB,UAAU,iBAAb,4CAEhB,wBAAQA,UAAU,SAASQ,QApCvC,WACI,GAAG1B,GAAYM,EAAW,CACtB,IAAMqB,EAAa3B,EAAWM,EACxBsB,EAAiBxB,EAAQ,IAAKuB,EAC9BE,EAAY,KAAMF,EAAaC,GAC/BE,EAAcH,EAAaC,EAAgBC,EAC3CE,EAAiB3B,EAAQ,IAAKE,EAEpCG,EAAckB,GACdd,EAAagB,GACbd,EAAee,GACfnB,EAAiBiB,GACjBX,EAAiBc,QAEjB5B,GAAW,IAsBP,uBAEA,kCACI,+BACI,6CACA,yCAEJ,+BACI,kDACA,wCAAaK,QAEjB,+BACI,qDAAwBJ,EAAxB,QACA,wCAAa4B,KAAKC,MAAMvB,SAE5B,+BACI,0CACA,wCAAasB,KAAKC,MAAMrB,SAE5B,+BACI,uCACA,wCAAaoB,KAAKC,MAAMnB,YAGhC,8BACI,oDAAuBE,OAE3B,oBAAGE,UAAU,aAAb,gEAA6E,mBAAGgB,KAAK,+BAA+BT,OAAO,SAA9C,uBAA7E,QAAsJ,mBAAGS,KAAK,gCAAgCT,OAAO,SAA/C,+BC9E1K,IAYeU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAChD,EAAD,MAEFiD,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.8f303d94.chunk.js","sourcesContent":["import React, { useState }   from 'react';\nimport './style.css';\n\nexport default function GoldCalc() {\n\n        const [goldrate, setGoldrate] = useState();\n        const [invalid, setInvalid] = useState(false);\n        const [wastage, setWastage] = useState();\n        const [goldweight, setGoldweight] = useState();\n        const [goldamount, setGoldamount] = useState(0);\n        const [wastageamount, setWastageAmount] = useState(0);\n        const [gstamount, setGstamount] = useState(0);\n        const [totalamount, setTotalamount] = useState(0);\n        const [wastageingram, setWastageingram] = useState(0);\n\n        function getGoldAmount(){\n            if(goldrate && goldweight){\n                const goldAmount = goldrate * goldweight;\n                const wastageAmount = (wastage/100)*goldAmount;\n                const GSTAmount = 0.03*(goldAmount + wastageAmount);\n                const totalAmount = goldAmount + wastageAmount + GSTAmount;\n                const wastageinGram = (wastage/100)*goldweight;\n\n                setGoldamount(goldAmount);\n                setGstamount(GSTAmount);\n                setTotalamount(totalAmount);\n                setWastageAmount(wastageAmount);\n                setWastageingram(wastageinGram);\n            }else{\n                setInvalid(true);\n            }\n        }\n\n            return (\n                <div className=\"App\">\n                    <h1 className=\"headerName\">Gold Calculator</h1>\n                    <form>\n                        <div>\n                            <label>Gold rate in &#x20b9;</label>\n                            <input type=\"number\" id=\"grate\" name=\"grate\" value={goldrate} onChange={e => setGoldrate(+e.target.value)}/>\n                        </div>\n                        <div>\n                            <label>Gold Weight in grams</label>\n                            <input type=\"number\" id=\"gweight\" name=\"gweight\" value={goldweight} onChange={e => setGoldweight(+e.target.value)}/>\n                        </div>\n                        <div>\n                            <label>Wastage in %</label>\n                            <input type=\"number\" id=\"wastage\" name=\"wastage\" value={wastage} onChange={e => setWastage(+e.target.value)}/>\n                        </div>\n                        {invalid && <p className=\"invalidMessage\"> ** Invalid input values **</p>}\n                    </form>\n                    <button className=\"button\" onClick={getGoldAmount}>Calculate</button>\n\n                    <table>\n                        <tr>\n                            <th>Description</th>\n                            <th>Rate</th>\n                        </tr>\n                        <tr>\n                            <td>Actual Gold Rate</td>\n                            <td>&#x20b9;{goldamount}</td>\n                        </tr>\n                        <tr>\n                            <td>Wastage in amount ({wastage}%)</td>\n                            <td>&#x20b9;{Math.round(wastageamount)}</td>\n                        </tr>\n                        <tr>\n                            <td>GST (3%)</td>\n                            <td>&#x20b9;{Math.round(gstamount)}</td>\n                        </tr>\n                        <tr>\n                            <td>Total</td>\n                            <td>&#x20b9;{Math.round(totalamount)}</td>\n                        </tr>\n                    </table>\n                    <div>\n                        <p>*Wastage in grams: {wastageingram}</p>\n                    </div>\n                    <p className=\"footerNote\">Developed based on indian gold market standards by <a href=\"https://github.com/jayasurya\" target=\"_blank\">Jayasurya</a> and <a href=\"https://github.com/yokesharun\" target=\"_blank\">Arun Yokesh</a></p>\n                </div>\n\n            );\n\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GoldCalc from './components/GoldCalculator'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GoldCalc />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n"],"sourceRoot":""}